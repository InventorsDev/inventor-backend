[33mcommit bc0ce6b43ee91c22f426536ae187781136496ca3[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mpostblog[m[33m, [m[1;31morigin/postblog[m[33m)[m
Author: Femi Asefon <asefonfemi@gmail.com>
Date:   Wed Nov 27 00:36:01 2024 +0100

    postblog

[1mdiff --git a/src/app.module.ts b/src/app.module.ts[m
[1mindex d3c221b..401bdb5 100644[m
[1m--- a/src/app.module.ts[m
[1m+++ b/src/app.module.ts[m
[36m@@ -7,8 +7,9 @@[m [mimport { AllExceptionsFilter } from './shared/exceptions';[m
 import { AuthModule } from './shared/auth/auth.module';[m
 import { DataLogsModule } from './shared/datalogs';[m
 import { UsersModule } from './users/users.module';[m
[31m-import { PostModule } from './blog/post.module';[m
[32m+[m[32mimport { PostCommentModule } from './blog/postcomment/postcomment.module';[m
 import { EventModule } from './events/events.users.module';[m
[32m+[m[32mimport { PostModule } from './blog/post/post.module';[m
 [m
 @Module({[m
   imports: [[m
[36m@@ -21,8 +22,9 @@[m [mimport { EventModule } from './events/events.users.module';[m
     ]),[m
     DataLogsModule,[m
     UsersModule,[m
[31m-    PostModule,[m
[32m+[m[32m    PostCommentModule,[m
     EventModule,[m
[32m+[m[32m    PostModule,[m
   ],[m
   controllers: [AppController],[m
   providers: [[m
[1mdiff --git a/src/blog/dto/post.dto.ts b/src/blog/post/dto/post.dto.ts[m
[1msimilarity index 88%[m
[1mrename from src/blog/dto/post.dto.ts[m
[1mrename to src/blog/post/dto/post.dto.ts[m
[1mindex a4bcc84..73c7e1b 100644[m
[1m--- a/src/blog/dto/post.dto.ts[m
[1m+++ b/src/blog/post/dto/post.dto.ts[m
[36m@@ -5,7 +5,7 @@[m [mimport {[m
   IsOptional,[m
   IsString,[m
 } from 'class-validator';[m
[31m-import { Status} from '../../shared/interfaces/post.type';[m
[32m+[m[32mimport { Status} from '../../../shared/interfaces/post.type';[m
 [m
 export class PostDto {[m
   @ApiProperty()[m
[1mdiff --git a/src/blog/dto/updatepost.dto.ts b/src/blog/post/dto/updatepost.dto.ts[m
[1msimilarity index 85%[m
[1mrename from src/blog/dto/updatepost.dto.ts[m
[1mrename to src/blog/post/dto/updatepost.dto.ts[m
[1mindex e6c0ce7..495f4ee 100644[m
[1m--- a/src/blog/dto/updatepost.dto.ts[m
[1m+++ b/src/blog/post/dto/updatepost.dto.ts[m
[36m@@ -1,5 +1,5 @@[m
 import { IsString, IsOptional, IsDate, IsEnum, IsArray } from 'class-validator';[m
[31m-import { Status } from '../../shared/interfaces/post.type';[m
[32m+[m[32mimport { Status } from '../../../shared/interfaces/post.type';[m
 [m
 export class UpdatePostDto {[m
   @IsOptional()[m
[1mdiff --git a/src/blog/post.controller.spec.ts b/src/blog/post/post.controller.spec.ts[m
[1msimilarity index 100%[m
[1mrename from src/blog/post.controller.spec.ts[m
[1mrename to src/blog/post/post.controller.spec.ts[m
[1mdiff --git a/src/blog/post.controller.ts b/src/blog/post/post.controller.ts[m
[1msimilarity index 100%[m
[1mrename from src/blog/post.controller.ts[m
[1mrename to src/blog/post/post.controller.ts[m
[1mdiff --git a/src/blog/post.module.ts b/src/blog/post/post.module.ts[m
[1msimilarity index 100%[m
[1mrename from src/blog/post.module.ts[m
[1mrename to src/blog/post/post.module.ts[m
[1mdiff --git a/src/blog/post.service.ts b/src/blog/post/post.service.ts[m
[1msimilarity index 98%[m
[1mrename from src/blog/post.service.ts[m
[1mrename to src/blog/post/post.service.ts[m
[1mindex d37136a..038e7d5 100644[m
[1m--- a/src/blog/post.service.ts[m
[1m+++ b/src/blog/post/post.service.ts[m
[36m@@ -21,7 +21,7 @@[m [mexport class PostService {[m
          shortDesc: payload.shortDesc,[m
          description: payload.description,[m
          photo: payload.photo,[m
[31m-         blogDate: payload.postDate,[m
[32m+[m[32m         postDate: payload.postDate,[m
        });[m
   }[m
 [m
[1mdiff --git a/src/blog/postcomment/comment.controller.spec.ts b/src/blog/postcomment/comment.controller.spec.ts[m
[1mnew file mode 100644[m
[1mindex 0000000..1bc89a2[m
[1m--- /dev/null[m
[1m+++ b/src/blog/postcomment/comment.controller.spec.ts[m
[36m@@ -0,0 +1,231 @@[m
[32m+[m[32m// import { Test, TestingModule } from '@nestjs/testing';[m
[32m+[m[32m// import { getModelToken } from '@nestjs/mongoose';[m
[32m+[m[32m// import { PostService } from '../post.service';[m
[32m+[m[32m// import { Post } from 'src/shared/schema';[m
[32m+[m[32m// import { PostDocument } from 'src/shared/schema/post.schema';[m
[32m+[m[32m// import { NotFoundException } from '@nestjs/common';[m
[32m+[m[32m// import { PostController } from '../post.controller';[m
[32m+[m[32m// import { Model } from 'mongoose';[m
[32m+[m[32m// import { TestModule } from 'src/shared/testkits';[m
[32m+[m[32m// import { PostDto } from '../post/dto/post.dto';[m
[32m+[m[32m// import { UpdatePostDto } from '../post/dto/updatepost.dto';[m
[32m+[m[32m// import { Status } from 'src/shared/interfaces/post.type';[m
[32m+[m
[32m+[m[32m// describe('PostService', () => {[m
[32m+[m[32m//   let service: PostService;[m
[32m+[m[32m//   let model: Model<PostDocument>;[m
[32m+[m
[32m+[m[32m//   const mockPostModel = {[m
[32m+[m[32m//     create: jest.fn(),[m
[32m+[m[32m//     find: jest.fn(),[m
[32m+[m[32m//     countDocuments: jest.fn(),[m
[32m+[m[32m//     findById: jest.fn(),[m
[32m+[m[32m//     findByIdAndUpdate: jest.fn(),[m
[32m+[m[32m//   };[m
[32m+[m
[32m+[m[32m//   const mockPost = {[m
[32m+[m[32m//     _id: '1',[m
[32m+[m[32m//     title: 'Sample Post',[m
[32m+[m[32m//     shortDesc: 'Short description',[m
[32m+[m[32m//     description: 'Full description',[m
[32m+[m[32m//     photo: 'photo.jpg',[m
[32m+[m[32m//     blogDate: new Date(),[m
[32m+[m[32m//     status: Status.APPROVED,[m
[32m+[m[32m//   };[m
[32m+[m
[32m+[m[32m//   beforeEach(async () => {[m
[32m+[m[32m//     const module: TestingModule =  await Test.createTestingModule({[m
[32m+[m[32m//       imports: [TestModule],[m
[32m+[m[32m//       controllers: [PostController],[m
[32m+[m[32m//       providers: [[m
[32m+[m[32m//         PostService,[m
[32m+[m[32m//         {[m
[32m+[m[32m//           provide: getModelToken(Post.name),[m
[32m+[m[32m//           useValue: mockPostModel,[m
[32m+[m[32m//         },[m
[32m+[m[32m//       ],[m
[32m+[m[32m//     }).compile();[m
[32m+[m
[32m+[m[32m//     service = module.get<PostService>(PostService);[m
[32m+[m[32m//     model = module.get<Model<PostDocument>>(getModelToken(Post.name));[m
[32m+[m[32m//   });[m
[32m+[m
[32m+[m[32m//   it('should be defined', () => {[m
[32m+[m[32m//     expect(service).toBeDefined();[m
[32m+[m[32m//   });[m
[32m+[m
[32m+[m[32m//   describe('createPost', () => {[m
[32m+[m[32m//     it('should create a new post', async () => {[m
[32m+[m[32m//       const dto: PostDto = {[m
[32m+[m[32m//         title: 'New Post',[m
[32m+[m[32m//         shortDesc: 'Short desc',[m
[32m+[m[32m//         description: 'Description',[m
[32m+[m[32m//         photo: 'photo.jpg',[m
[32m+[m[32m//         postDate: new Date(),[m
[32m+[m[32m//       };[m
[32m+[m
[32m+[m[32m//       mockPostModel.create.mockResolvedValueOnce(mockPost);[m
[32m+[m[32m//       const result = await service.createPost(dto);[m
[32m+[m
[32m+[m[32m//       expect(mockPostModel.create).toHaveBeenCalledWith({[m
[32m+[m[32m//         title: dto.title,[m
[32m+[m[32m//         shortDesc: dto.shortDesc,[m
[32m+[m[32m//         description: dto.description,[m
[32m+[m[32m//         photo: dto.photo,[m
[32m+[m[32m//         blogDate: dto.postDate,[m
[32m+[m[32m//       });[m
[32m+[m[32m//       expect(result).toEqual(mockPost);[m
[32m+[m[32m//     });[m
[32m+[m[32m//   });[m
[32m+[m
[32m+[m[32m//   // describe('findAll', () => {[m
[32m+[m[32m//   //   it('should return paginated posts', async () => {[m
[32m+[m[32m//   //     const mockPaginatedResponse = { items: [mockPost], totalCount: 1 };[m
[32m+[m[32m//   //     const mockRequest = { query: {} };[m
[32m+[m
[32m+[m[32m//   //     jest[m
[32m+[m[32m//   //       .spyOn(require('src/shared/utils'), 'getPagingParams')[m
[32m+[m[32m//   //       .mockReturnValue({[m
[32m+[m[32m//   //         page: 1,[m
[32m+[m[32m//   //         currentLimit: 10,[m
[32m+[m[32m//   //         skip: 0,[m
[32m+[m[32m//   //         order: 1,[m
[32m+[m[32m//   //         dbQuery: {},[m
[32m+[m[32m//   //       });[m
[32m+[m
[32m+[m[32m//   //     jest[m
[32m+[m[32m//   //       .spyOn(require('src/shared/utils'), 'getPaginated')[m
[32m+[m[32m//   //       .mockReturnValue(mockPaginatedResponse);[m
[32m+[m
[32m+[m[32m//   //     mockPostModel.find.mockReturnValueOnce({[m
[32m+[m[32m//   //       sort: jest.fn().mockReturnThis(),[m
[32m+[m[32m//   //       skip: jest.fn().mockReturnThis(),[m
[32m+[m[32m//   //       limit: jest.fn().mockReturnThis(),[m
[32m+[m[32m//   //       lean: jest.fn().mockReturnThis(),[m
[32m+[m[32m//   //       exec: jest.fn().mockResolvedValueOnce([mockPost]),[m
[32m+[m[32m//   //     });[m
[32m+[m
[32m+[m[32m//   //     mockPostModel.countDocuments.mockResolvedValueOnce(1);[m
[32m+[m
[32m+[m[32m//   //     const result = await service.findAll(mockRequest);[m
[32m+[m
[32m+[m[32m//   //     expect(result).toEqual(mockPaginatedResponse);[m
[32m+[m[32m//   //   });[m
[32m+[m[32m//   // });[m
[32m+[m
[32m+[m[32m//   // describe('findById', () => {[m
[32m+[m[32m//   //   it('should return a post by ID', async () => {[m
[32m+[m[32m//   //     mockPostModel.findById.mockReturnValueOnce({[m
[32m+[m[32m//   //       lean: jest.fn().mockReturnThis(),[m
[32m+[m[32m//   //       exec: jest.fn().mockResolvedValueOnce(mockPost),[m
[32m+[m[32m//   //     });[m
[32m+[m
[32m+[m[32m//   //     const result =  service.findById('1');[m
[32m+[m
[32m+[m[32m//   //     expect(mockPostModel.findById).toHaveBeenCalledWith('1');[m
[32m+[m[32m//   //     expect(result).toEqual(mockPost);[m
[32m+[m[32m//   //   });[m
[32m+[m
[32m+[m[32m//   //   it('should throw NotFoundException if post is not found', async () => {[m
[32m+[m[32m//   //     mockPostModel.findById.mockReturnValueOnce({[m
[32m+[m[32m//   //       lean: jest.fn().mockReturnThis(),[m
[32m+[m[32m//   //       exec: jest.fn().mockResolvedValueOnce(null),[m
[32m+[m[32m//   //     });[m
[32m+[m
[32m+[m[32m//   //     await expect(service.findById('2')).rejects.toThrow([m
[32m+[m[32m//   //       NotFoundException,[m
[32m+[m[32m//   //     );[m
[32m+[m[32m//   //   });[m
[32m+[m[32m//   // });[m
[32m+[m
[32m+[m[32m//   // describe('updatePost', () => {[m
[32m+[m[32m//   //   it('should update a post', async () => {[m
[32m+[m[32m//   //     const updateDto: UpdatePostDto = { title: 'Updated Title' };[m
[32m+[m
[32m+[m[32m//   //     mockPostModel.findByIdAndUpdate.mockReturnValueOnce({[m
[32m+[m[32m//   //       lean: jest.fn().mockReturnThis(),[m
[32m+[m[32m//   //       exec: jest.fn().mockResolvedValueOnce({ ...mockPost, ...updateDto }),[m
[32m+[m[32m//   //     });[m
[32m+[m
[32m+[m[32m//   //     const result = service.updatePost('1', updateDto);[m
[32m+[m
[32m+[m[32m//   //     expect(mockPostModel.findByIdAndUpdate).toHaveBeenCalledWith([m
[32m+[m[32m//   //       '1',[m
[32m+[m[32m//   //       updateDto,[m
[32m+[m[32m//   //       { new: true, lean: true },[m
[32m+[m[32m//   //     );[m
[32m+[m[32m//   //     expect(result).toEqual({ ...mockPost, ...updateDto });[m
[32m+[m[32m//   //   });[m
[32m+[m
[32m+[m[32m//   //   it('should throw NotFoundException if post is not found', async () => {[m
[32m+[m[32m//   //     mockPostModel.findByIdAndUpdate.mockReturnValueOnce({[m
[32m+[m[32m//   //       lean: jest.fn().mockReturnThis(),[m
[32m+[m[32m//   //       exec: jest.fn().mockResolvedValueOnce(null),[m
[32m+[m[32m//   //     });[m
[32m+[m
[32m+[m[32m//   //     await expect([m
[32m+[m[32m//   //       service.updatePost('2', { title: 'Updated Title' }),[m
[32m+[m[32m//   //     ).rejects.toThrow(NotFoundException);[m
[32m+[m[32m//   //   });[m
[32m+[m[32m//   // });[m
[32m+[m
[32m+[m[32m//   // describe('softDeletePost', () => {[m
[32m+[m[32m//   //   it('should soft delete a post', async () => {[m
[32m+[m[32m//   //     mockPostModel.findByIdAndUpdate.mockReturnValueOnce({[m
[32m+[m[32m//   //       exec: jest.fn().mockResolvedValueOnce({[m
[32m+[m[32m//   //         ...mockPost,[m
[32m+[m[32m//   //         status: Status.DELETED,[m
[32m+[m[32m//   //       }),[m
[32m+[m[32m//   //     });[m
[32m+[m
[32m+[m[32m//   //     const result =  service.softDeletePost('1');[m
[32m+[m
[32m+[m[32m//   //     expect(mockPostModel.findByIdAndUpdate).toHaveBeenCalledWith([m
[32m+[m[32m//   //       '1',[m
[32m+[m[32m//   //       { status: Status.DELETED },[m
[32m+[m[32m//   //       { new: true },[m
[32m+[m[32m//   //     );[m
[32m+[m[32m//   //     expect(result.status).toEqual(Status.DELETED);[m
[32m+[m[32m//   //   });[m
[32m+[m
[32m+[m[32m//   //   it('should throw NotFoundException if post is not found', async () => {[m
[32m+[m[32m//   //     mockPostModel.findByIdAndUpdate.mockReturnValueOnce({[m
[32m+[m[32m//   //       exec: jest.fn().mockResolvedValueOnce(null),[m
[32m+[m[32m//   //     });[m
[32m+[m
[32m+[m[32m//   //     await expect(service.softDeletePost('2')).rejects.toThrow([m
[32m+[m[32m//   //       NotFoundException,[m
[32m+[m[32m//   //     );[m
[32m+[m[32m//   //   });[m
[32m+[m[32m//   // });[m
[32m+[m
[32m+[m[32m//   // describe('approvePost', () => {[m
[32m+[m[32m//   //   it('should approve a post', async () => {[m
[32m+[m[32m//   //     mockPostModel.findByIdAndUpdate.mockReturnValueOnce({[m
[32m+[m[32m//   //       exec: jest.fn().mockResolvedValueOnce({[m
[32m+[m[32m//   //         ...mockPost,[m
[32m+[m[32m//   //         status: Status.APPROVED,[m
[32m+[m[32m//   //       }),[m
[32m+[m[32m//   //     });[m
[32m+[m
[32m+[m[32m//   //     const result = service.approvePost('1');[m
[32m+[m
[32m+[m[32m//   //     expect(mockPostModel.findByIdAndUpdate).toHaveBeenCalledWith([m
[32m+[m[32m//   //       '1',[m
[32m+[m[32m//   //       { status: Status.APPROVED },[m
[32m+[m[32m//   //       { new: true },[m
[32m+[m[32m//   //     );[m
[32m+[m[32m//   //     expect(result.status).toEqual(Status.APPROVED);[m
[32m+[m[32m//   //   });[m
[32m+[m
[32m+[m[32m//   //   it('should throw NotFoundException if post is not found', async () => {[m
[32m+[m[32m//   //     mockPostModel.findByIdAndUpdate.mockReturnValueOnce({[m
[32m+[m[32m//   //       exec: jest.fn().mockResolvedValueOnce(null),[m
[32m+[m[32m//   //     });[m
[32m+[m
[32m+[m[32m//   //      await expect(service.approvePost('2')).rejects.toThrow([m
[32m+[m[32m//   //       NotFoundException,[m
[32m+[m[32m//   //     );[m
[32m+[m[32m//   //   });[m
[32m+[m[32m//   // });[m
[32m+[m[32m// });[m
\ No newline at end of file[m
[1mdiff --git a/src/blog/postcomment/dto/postComment.dto.ts b/src/blog/postcomment/dto/postComment.dto.ts[m
[1mnew file mode 100644[m
[1mindex 0000000..f1cf6f6[m
[1m--- /dev/null[m
[1m+++ b/src/blog/postcomment/dto/postComment.dto.ts[m
[36m@@ -0,0 +1,35 @@[m
[32m+[m[32mimport { ApiProperty } from '@nestjs/swagger';[m
[32m+[m[32mimport {[m
[32m+[m[32m  IsEnum,[m
[32m+[m[32m  IsNotEmpty,[m
[32m+[m[32m  IsOptional,[m
[32m+[m[32m  IsString,[m
[32m+[m[32m} from 'class-validator';[m
[32m+[m[32mimport { Status} from '../../../shared/interfaces/postcomment.type';[m
[32m+[m
[32m+[m[32mexport class PostCommentDto {[m
[32m+[m[32m  @ApiProperty()[m
[32m+[m[32m  @IsString()[m
[32m+[m[32m  @IsNotEmpty()[m
[32m+[m[32m  title: string;[m
[32m+[m
[32m+[m[32m  @ApiProperty()[m
[32m+[m[32m  @IsString()[m
[32m+[m[32m  @IsNotEmpty()[m
[32m+[m[32m  shortDesc: string;[m
[32m+[m
[32m+[m[32m  @ApiProperty()[m
[32m+[m[32m  @IsNotEmpty()[m
[32m+[m[32m  @IsString()[m
[32m+[m[32m  description: string;[m
[32m+[m
[32m+[m[32m  @ApiProperty()[m
[32m+[m[32m  @IsNotEmpty()[m
[32m+[m[32m  @IsString()[m
[32m+[m[32m  photo?: string;[m
[32m+[m
[32m+[m[32m  @ApiProperty()[m
[32m+[m[32m  @IsNotEmpty()[m
[32m+[m[32m  @IsString()[m
[32m+[m[32m  PostCommentDate: Date;[m
[32m+[m[32m}[m
[1mdiff --git a/src/blog/postcomment/dto/updatePostComment.dto.ts b/src/blog/postcomment/dto/updatePostComment.dto.ts[m
[1mnew file mode 100644[m
[1mindex 0000000..b3bd2af[m
[1m--- /dev/null[m
[1m+++ b/src/blog/postcomment/dto/updatePostComment.dto.ts[m
[36m@@ -0,0 +1,25 @@[m
[32m+[m[32mimport { IsString, IsOptional, IsDate, IsEnum, IsArray } from 'class-validator';[m
[32m+[m[32mimport { Status } from '../../../shared/interfaces/postcomment.type';[m
[32m+[m
[32m+[m[32mexport class UpdatePostCommentDto {[m
[32m+[m[32m  @IsOptional()[m
[32m+[m[32m  @IsString()[m
[32m+[m[32m  title?: string;[m
[32m+[m
[32m+[m[32m  @IsOptional()[m
[32m+[m[32m  @IsString()[m
[32m+[m[32m  shortDesc?: string;[m
[32m+[m
[32m+[m[32m  @IsOptional()[m
[32m+[m[32m  @IsString()[m
[32m+[m[32m  description?: string;[m
[32m+[m
[32m+[m[41m  [m
[32m+[m[32m  @IsOptional()[m
[32m+[m[32m  @IsString()[m
[32m+[m[32m  photo?: string;[m
[32m+[m
[32m+[m[32m  @IsOptional()[m
[32m+[m[32m  @IsDate()[m
[32m+[m[32m  PostCommentDate?: Date;[m
[32m+[m[32m}[m
[1mdiff --git a/src/blog/postcomment/postcomment.controller.ts b/src/blog/postcomment/postcomment.controller.ts[m
[1mnew file mode 100644[m
[1mindex 0000000..55a7fe8[m
[1m--- /dev/null[m
[1m+++ b/src/blog/postcomment/postcomment.controller.ts[m
[36m@@ -0,0 +1,64 @@[m
[32m+[m[32mimport {[m
[32m+[m[32m  Controller,[m
[32m+[m[32m  Post,[m
[32m+[m[32m  Body,[m
[32m+[m[32m  UseGuards,[m
[32m+[m[32m  Request,[m
[32m+[m[32m  Get,[m
[32m+[m[32m  Param,[m
[32m+[m[32m  Req,[m
[32m+[m[32m  Patch,[m
[32m+[m[32m  Delete,[m
[32m+[m[32m} from '@nestjs/common';[m
[32m+[m[32mimport { PostCommentService } from './postcomment.service';[m
[32m+[m[32mimport { ApiBearerAuth, ApiParam, ApiTags } from '@nestjs/swagger';[m
[32m+[m[32mimport { JwtPostCommentUserGuard } from 'src/shared/auth/guards/jwt.postcomment.guard';[m
[32m+[m[32mimport { ApiReq } from 'src/shared/interfaces';[m
[32m+[m[32mimport { PostCommentDto } from './dto/postComment.dto';[m
[32m+[m[32mimport { UpdatePostCommentDto } from './dto/updatePostComment.dto';[m
[32m+[m[32mimport { JwtUsersGuard } from 'src/shared/auth/guards/jwt.users.guard';[m
[32m+[m
[32m+[m[32m@ApiTags('blog')[m
[32m+[m[32m@Controller('postcomment')[m
[32m+[m[32mexport class PostCommentController {[m
[32m+[m[32m  constructor(private readonly PostCommentService: PostCommentService) {}[m
[32m+[m
[32m+[m[32m  @ApiBearerAuth()[m
[32m+[m[32m  @UseGuards(JwtPostCommentUserGuard)[m
[32m+[m[32m  @Post()[m
[32m+[m[32m  async createPostComment(@Body() payload: PostCommentDto) {[m
[32m+[m[32m    return this.PostCommentService.createPostComment(payload);[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  @ApiBearerAuth()[m
[32m+[m[32m  @Get()[m
[32m+[m[32m  async getAllPostComment(@Req() req: ApiReq) {[m
[32m+[m[41m   [m
[32m+[m[32m    return this.PostCommentService.findAll(req);[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  @Get(':id')[m
[32m+[m[32m  @ApiParam({ name: 'id', type: 'string' })[m
[32m+[m[32m  async getPostCommentById(@Param('id') id: string) {[m
[32m+[m[32m    return this.PostCommentService.findById(id);[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  @ApiBearerAuth()[m
[32m+[m[32m  @UseGuards(JwtPostCommentUserGuard)[m
[32m+[m[32m  @Patch(':id')[m
[32m+[m[32m  @ApiParam({ name: 'id', type: 'string' })[m
[32m+[